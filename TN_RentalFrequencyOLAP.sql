-- 917354
set linesize 145
set pagesize 66

-- xii. Given a customer name find “recommended movies” for the customer 1. Find all other customers that have rented the same movie as the current customer and review their rentals and favourites as suggested movies (Similar to Netflix’s algorithm).
SELECT 
    mr.category, 
    mr.filmName, 
    mr.RentalTimes,
    RANK() OVER (PARTITION BY mr.category ORDER BY mr.RentalTimes DESC) AS CategoryRank, -- This line was generated by chatgpt
    cr.TotalCategoryRentals,  
    tv.TotalVODRentals
FROM 
    (SELECT
        m.filmId,
        m.filmName,
        m.category,
        COUNT(*) AS RentalTimes
     FROM movie m
     JOIN rental r ON m.filmId = r.filmId
     GROUP BY m.filmId, m.filmName, m.category) mr
JOIN 
    (SELECT 
        category, 
        SUM(RentalTimes) AS TotalCategoryRentals
     FROM (SELECT
               m.filmId,
               m.category,
               COUNT(*) AS RentalTimes
           FROM movie m
           JOIN rental r ON m.filmId = r.filmId
           GROUP BY m.filmId, m.category)
     GROUP BY category) cr ON mr.category = cr.category
CROSS JOIN 
    (SELECT 
        SUM(RentalTimes) AS TotalVODRentals
     FROM (SELECT
               m.filmId,
               COUNT(*) AS RentalTimes
           FROM movie m
           JOIN rental r ON m.filmId = r.filmId
           GROUP BY m.filmId)) tv
ORDER BY 
    mr.category, mr.RentalTimes DESC;

